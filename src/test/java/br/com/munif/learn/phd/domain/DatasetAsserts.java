package br.com.munif.learn.phd.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DatasetAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatasetAllPropertiesEquals(Dataset expected, Dataset actual) {
        assertDatasetAutoGeneratedPropertiesEquals(expected, actual);
        assertDatasetAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatasetAllUpdatablePropertiesEquals(Dataset expected, Dataset actual) {
        assertDatasetUpdatableFieldsEquals(expected, actual);
        assertDatasetUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatasetAutoGeneratedPropertiesEquals(Dataset expected, Dataset actual) {
        assertThat(expected)
            .as("Verify Dataset auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatasetUpdatableFieldsEquals(Dataset expected, Dataset actual) {
        assertThat(expected)
            .as("Verify Dataset relevant properties")
            .satisfies(e -> assertThat(e.getNome()).as("check nome").isEqualTo(actual.getNome()))
            .satisfies(e -> assertThat(e.getDescricao()).as("check descricao").isEqualTo(actual.getDescricao()))
            .satisfies(e -> assertThat(e.getDiferencaMinima()).as("check diferencaMinima").isEqualTo(actual.getDiferencaMinima()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatasetUpdatableRelationshipsEquals(Dataset expected, Dataset actual) {
        assertThat(expected)
            .as("Verify Dataset relationships")
            .satisfies(e -> assertThat(e.getUsuario()).as("check usuario").isEqualTo(actual.getUsuario()));
    }
}
