package br.com.munif.learn.phd.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ImagemAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertImagemAllPropertiesEquals(Imagem expected, Imagem actual) {
        assertImagemAutoGeneratedPropertiesEquals(expected, actual);
        assertImagemAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertImagemAllUpdatablePropertiesEquals(Imagem expected, Imagem actual) {
        assertImagemUpdatableFieldsEquals(expected, actual);
        assertImagemUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertImagemAutoGeneratedPropertiesEquals(Imagem expected, Imagem actual) {
        assertThat(expected)
            .as("Verify Imagem auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertImagemUpdatableFieldsEquals(Imagem expected, Imagem actual) {
        assertThat(expected)
            .as("Verify Imagem relevant properties")
            .satisfies(e -> assertThat(e.getNome()).as("check nome").isEqualTo(actual.getNome()))
            .satisfies(e -> assertThat(e.getCaminho()).as("check caminho").isEqualTo(actual.getCaminho()))
            .satisfies(e -> assertThat(e.getMimeType()).as("check mimeType").isEqualTo(actual.getMimeType()))
            .satisfies(e -> assertThat(e.getLargura()).as("check largura").isEqualTo(actual.getLargura()))
            .satisfies(e -> assertThat(e.getAltura()).as("check altura").isEqualTo(actual.getAltura()))
            .satisfies(e -> assertThat(e.getDados()).as("check dados").isEqualTo(actual.getDados()))
            .satisfies(e -> assertThat(e.getDadosContentType()).as("check dados contenty type").isEqualTo(actual.getDadosContentType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertImagemUpdatableRelationshipsEquals(Imagem expected, Imagem actual) {
        assertThat(expected)
            .as("Verify Imagem relationships")
            .satisfies(e -> assertThat(e.getDataset()).as("check dataset").isEqualTo(actual.getDataset()))
            .satisfies(e -> assertThat(e.getConjunto()).as("check conjunto").isEqualTo(actual.getConjunto()))
            .satisfies(e -> assertThat(e.getClasse()).as("check classe").isEqualTo(actual.getClasse()));
    }
}
